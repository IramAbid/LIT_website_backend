generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//--------------------------------------------------------------------
//##### ../prisma/schema/achievement.schema                                                       
//--------------------------------------------------------------------

// Achievement schema
model Achievement {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [userId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
}

//--------------------------------------------------------------------
//##### ../prisma/schema/blog.schema                                                       
//--------------------------------------------------------------------

// Blog schema
model Blog {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [userId], references: [id])
  titleOfBlog String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      Int
}

//--------------------------------------------------------------------
//##### ../prisma/schema/course.schema                                                       
//--------------------------------------------------------------------

// Course schema
model Course {
  id        Int      @id @default(autoincrement())
  course    String
  offeredBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  users     User[]
}

//--------------------------------------------------------------------
//##### ../prisma/schema/file.schema                                                       
//--------------------------------------------------------------------

// File schema
model File {
  id         String   @id @default(uuid())
  resource   Resource @relation(fields: [resourceId], references: [id])
  title      String
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  resourceId Int
}

//--------------------------------------------------------------------
//##### ../prisma/schema/resource.schema                                                       
//--------------------------------------------------------------------

// Resource schema
model Resource {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [userId], references: [id])
  description String
  title       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  userId      Int
  files       File[]
}

//--------------------------------------------------------------------
//##### ../prisma/schema/user.schema                                                       
//--------------------------------------------------------------------

// User schema
model User {
  id           Int           @id @unique @default(autoincrement())
  firstName    String
  lastName     String
  email        String        @unique
  password     String
  gender       String
  role         Role @default(AWARDEE)
  course       Course?       @relation(fields: [courseId], references: [id])
  branch       String
  year         Int
  contact      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  typeId       Int
  courseId     Int?
  auth         Auth?
  achievements Achievement[]
  blogs        Blog[]
  resources    Resource[]

  @@index([email])
}

//--------------------------------------------------------------------
//##### ../prisma/schema/auth.schema                                                       
//--------------------------------------------------------------------

// Auth schema
model Auth {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  type         String?
  is_active    Boolean?
  is_logged_in Boolean?
  auth_token   String?
  auth_timeout DateTime?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

//--------------------------------------------------------------------
//##### ../prisma/schema/Role.schema                                                       
//--------------------------------------------------------------------

enum Role{
  AWARDEE
  MENTOR
  SPONSOR
  ADMIN
}
