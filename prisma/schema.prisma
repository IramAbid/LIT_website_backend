
// schema.prisma

generator client {
  provider = "prisma-client-js"
  url      = env("DATABASE_URL")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User schema
model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String?
  gender    Boolean
  type      UserType @relation(fields: [typeId], references: [id])
  course    Course?  @relation(fields: [courseId], references: [id])
  contact   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  typeId    Int
  courseId  Int?
  auth      Auth?
  achievements  Achievement[]
  blogs         Blog[]
  resources     Resource[]
}

// UserType schema
model UserType {
  id        Int       @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

// Auth schema
model Auth {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  email       String
  password    String
  is_active   Boolean
  is_logged_in Boolean
  auth_token  String
  auth_timeout DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// Course schema
model Course {
  id         Int       @id @default(autoincrement())
  course     String
  offeredBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  users      User[]
}

// Achievement schema
model Achievement {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [authorId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
}

// Blog schema
model Blog {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [authorId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
}

// Resource schema
model Resource {
  id          Int      @id @default(autoincrement())
  author      User     @relation(fields: [authorId], references: [id])
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    Int
  files       File[]
}

// File schema
model File {
  id           Int      @id @default(autoincrement())
  resource     Resource @relation(fields: [resourceId], references: [id])
  url          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resourceId   Int
}
